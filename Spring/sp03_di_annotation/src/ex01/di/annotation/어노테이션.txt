어노테이션(Annotation)
:클래스 , 필드 , 메소드 과 같은 프로그램 요소에 다양한 종류의 정보를 주는 것을....
 ---------------------------------------------------
@Autowired (by type)
목적 : 의존관계를 자동설정할 때 사용하며 [타입]을 이용하여 의존하는 객체를 삽입해 준다. 
그러므로 해당 타입의 [빈객체가 존재]하지 않거나 또는 [2개 이상 존재]할 경우 스프링은 예외를 발생시키게 된다.
설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
추가설정 : 
@Autowired 기능만 적용하고 싶다면
<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean> 
AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
옵션 : required - @Autowired어노테이션을 적용한 프로퍼티에 대해 굳이 설정할 필요가 없는 경우에 false값을 주며 이때 해당 프로퍼티가 존재하지 않더라도 스프링은 예외를 발생시키지 않는다. 디폴트값은 true

주의 )
container 에 
같은 id 를 가진 객체가 두 개 있더라 하더라도
id 가 멤버변수 명이나 파라메터 이름과 동일한 경우 error 없이 주입
----------------------------------------------------
@Required
목적 : 필수 프로퍼티를 지정 
설정 위치 : setter메소드
추가설정 : RequiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
		 (xml 등록)
해당 설정 대신에<context:annotation-config> 태그를 사용해도 된다.
         (context 설정)
<beans 
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
">
---------------------------------------------------

--------------------------------------
@Qualifier
목적 : @Autowired의 목적에서 동일 타입의 빈(bean)객체가 존재시    특정빈을 삽입 할 수 있게 설정한다. 
설정위치 : @Autowired 어노테이션과 함께 사용된다.
추가설정 : 동일타입의 빈객체 설정에서 <qualifier value="[alias명]" />를 추가하여 준다.
옵션 : name - alias명

---------------------------------------
@Resource
목적 : 어플리케이션에서 필요로 하는 자원을 자동 연결(의존하는 빈 객체 전달)할 때 사용
       @Autowired 와 같은 기능을 하며 @Autowired와 차이점은 
       @Autowired는 타입으로(by type),  @
       Resource는 이름으로(by name)으로 연결시켜 준다는 것이다.
설정위치 : 멤버필드 , 프로퍼티, setter메소드  (생성자 불가)
추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
옵션 : name 
-----------------------------------------