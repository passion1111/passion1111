<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

<!--  
		ICalc calc = new CalcImp();

	    ICalc proxy =(ICalc)Proxy.newProxyInstance(calc.getClass().getClassLoader(),  //클래스를 찿는 코드
				               calc.getClass().getInterfaces(),   //행위정보(interface)
				               new LogPrintHandler(calc)); 
	    int result = proxy.MUL(100, 100);
	    System.out.println(result);
	    위 코드를 Spring 설정으로 전환하기
	   LogPrintAroundAdvice 객체 bean 생성
	   org.springframework.aop.framework.ProxyFactoryBean bean 생성 
-->
<bean id="cal" class="ex04.spring.aop.CalcImpl"></bean>
<bean id="logPrintAroundAdvice"   class="ex04.spring.aop.LogPrintAroundAdvice"></bean>
<bean id="logPrintBeforeAdvice"   class="ex04.spring.aop.LogPrintBeforeAdvice"></bean>
<bean id="proxy" class=" org.springframework.aop.framework.ProxyFactoryBean">
	<!--
		ProxyFactoryBean 클래스가 가지는 의존객체 주입 (property 로)
		property 의 name 값은  setter 구현한 ProxyFactoryBean 멤버변수명
	-->
	<property name="proxyInterfaces">
		<list>
			<value>ex04.spring.aop.ICalc</value> <!-- 인터페이스 경로  -->
		</list>
	</property>
	<property name="target" ref="cal"></property>
	<property name="interceptorNames"><!-- 보조관심사  -->
		<list>
			<!-- 여러개의 보조관심사 적용이 가능하다
				AroundAdvice , BeforeAdvice 동시에 적용 가능
			-->
		    <!-- <value>logPrintAroundAdvice</value> --> <!-- 핸들러 ID값  -->
			<value>logPrintBeforeAdvice</value>
		</list>
	</property>
</bean>

</beans>