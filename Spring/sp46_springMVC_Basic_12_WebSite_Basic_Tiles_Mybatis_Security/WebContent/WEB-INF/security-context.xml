<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
<!-- 1단계 처리하기 
     ROLE_USER 권한
     ROLE_ADMIN 권한
     
     notice.jsp -> noticeDetail -> 인증(auto-config="true") 
     -> Spring 제공하는 login Form  이동 -> ID, PWD  검증 (in-memory)
     -> kglim , 1004 인증을 받으면 어떤 권한 :  ROLE_USER 권한 획득
     
     -> Web .xml 필터 적용하기
     -> 3.x.x =>  access="ROLE_USER" 
     -> 4.x.x =>  access="hasRole('ROLE_USER')"
     
     TEST : kingsmile ,1004 상세
     TEST : admin ,1004 글쓰기 , 상세
   	<security:http auto-config="true">
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="ROLE_USER" />
		<security:intercept-url pattern="/customer/noticeReg.htm" access="ROLE_ADMIN" />
	</security:http>	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
					<security:user name="kingsmile" password="1004" authorities="ROLE_USER"/>
					<security:user name="admin" password="1004" authorities="ROLE_USER,ROLE_ADMIN"/>				
			</security:user-service>		
		</security:authentication-provider>
	</security:authentication-manager>
-->
	
<!-- 2단계 처리 
사용자가 정의한 loginForm 사용하기
->auto-config="true" (x)
-><security:form-login login-page="/joinus/login.htm" />
->authentication-failure-url="/joinus/login.htm?error" /> 로그인 실패
-><security:logout logout-success-url="/index.htm" /> 로그아웃처리
-->
<security:http auto-config="true" use-expressions="true">

		<security:form-login login-page="/joinus/login.htm"
		authentication-failure-url="/joinus/login.htm?error" />
		<security:logout logout-success-url="/index.htm" />
		
		<!-- 
		1단계 : 파일 별로 권한 설정하기
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="ROLE_USER" />
		<security:intercept-url pattern="/customer/noticeReg.htm" access="ROLE_ADMIN" /> 
		
		-->
		<!-- 
		2단계  : Pattern 권한 설정하기
		 aaaReg.htm , bbbb_Reg.htm 적용
		  <security:intercept-url pattern="/customer/*" access="ROLE_USER" /> customer 폴더 모든 파일
		 <security:intercept-url pattern="/customer/**" access="ROLE_USER" /> customer 폴더 안의 하위 폴더까지 포함
		 <security:intercept-url pattern="/customer/*.htm" access="ROLE_USER" />   a.htm , bbb.htm
		 <security:intercept-url pattern="/customer/*Reg.htm" access="ROLE_USER" /> NoitceReg.htm , aa_Reg.htm
		 -->
		<!-- <security:intercept-url pattern="/customer/*.Reg.htm" access="ROLE_USER"/> -->
		<security:intercept-url pattern="/customer/*" access="ROLE_USER" />
		<security:intercept-url pattern="/admin/**" access="ROLE_ADMIN"/>
		
		
	</security:http>	
	<security:authentication-manager>
		<security:authentication-provider>
			<!-- 1단계 in-memory  방식  -->
			<!-- <security:user-service>
					<security:user name="kingsmile" password="1004" authorities="ROLE_USER"/>
					<security:user name="admin" password="1004" authorities="ROLE_USER,ROLE_ADMIN"/>				
			</security:user-service>	 --> 
			
			<!-- 2단계 Spring security JDBC  -->
			<security:jdbc-user-service data-source-ref="driverManagerDataSource"
			users-by-username-query="SELECT ID, password , 1 enabled FROM users where name=?" 
			authorities-by-username-query="select m.ID , r.role_id  
											from users m join roll r 
											on m.id = r.role_id
											where m.id=?" />
		</security:authentication-provider>
	</security:authentication-manager>
</beans>