<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
<!-- 
현재 사이트
사용자의 인증과 권한 처리 설정

-인증받지 않은 일반사용자
-인증받은 일반사용자
-인증받은 관리자

-게시판 (customer > notice.jsp , noticeReg.jsp , noticeDetail.jsp , noticeEdit.jsp
-게시판 목록(notice.jsp) :  일반사용자(인증 x) : 사이트 접속하는 모든 사용자
-게시판 상세(noticeDetail.jsp) :  일반사용자(인증 0) : 로그인해서 인증을 받은 일반사용자
-게시판 글쓰기(noticeReg.jsp) : 관리자 : 인증받은 일반사용자이면서 관리자 권한을 가지는 사용자
 
 
-권한 정의 
ROLE_USER : 인증받은 일반 사용자가 취득하는 롤(권한그룹 : ROEL_Name)
auto-config="true" : 스프링이 정의하는 환경 설정을 그대로 따라 가겠다
                   : 스프링은 로그폼도 별도로 제공
실제로 DB(DAO) 방법으로 처리하는 것이 원칙 (DB연동 전에)
in-memory 방식으로 프로그램에서 계정과 비번을 세팅해서 작업 처리 
authentication : 인증 
authorities : 관계(권한)

auto-config="true"  인해서  Spring 제공하는 loginForm 으로 이동
-> 내가 만든 login page 로 가고 싶어요

-->
	<security:http>
		<security:form-login login-page="/joinus/login.htm"
		 authentication-failure-url="/joinus/login.htm?error"  />
		<security:logout logout-success-url="/index.htm" />
		<!-- 
		JDBC 적용전 파일별로 권한 처리한 코드
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="ROLE_USER"/>
		<security:intercept-url pattern="/customer/noticeReg.htm" access="ROLE_ADMIN"/> 
		
		-->
		<!-- 
		Pattern 샘플
		 <security:intercept-url pattern="/customer/*" access="ROLE_USER" /> => customer 폴더 모든 파일
		 <security:intercept-url pattern="/customer/**" access="ROLE_USER" /> => customer 폴더 안의 하위 폴더까지 포함
		 <security:intercept-url pattern="/customer/*.htm" access="ROLE_USER" />  
		 <security:intercept-url pattern="/customer/*Reg.htm" access="ROLE_USER" />
		 aaaReg.htm , bbbb_Reg.htm 적용
		 -->
		
		
		<security:intercept-url pattern="/customer/*Detail.htm" access="ROLE_USER" />
		<security:intercept-url pattern="/customer/*Reg.htm" access="ROLE_USER" />
		<security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
	</security:http>
	
    <security:authentication-manager>
    	<security:authentication-provider>
    	<!-- JDBC 연동코드 -->
    	<security:jdbc-user-service  data-source-ref="driverManagerDataSource"
    	 users-by-username-query="SELECT id AS USERID  ,  
    	                                             passwd AS PASSWD ,  
    	                                             1 enabled 
    	                          FROM member WHERE id=?"
    	 authorities-by-username-query="SELECT id AS USERID  ,  
    	                                         'ROLE_USER' AS ROLL_NAME
		                                FROM member WHERE id=?"                         
    	/>  
<!--     	 authorities-by-username-query="SELECT &quot;UID&quot; AS USER_ID  ,  
    	                                         'ROLE_USER' AS ROLE_NAME
		                                FROM member2 WHERE &quot;UID&quot;=?"  -->                        
    	<!--  DB연결하지 않고 in-memory 처리 	
    			<security:user-service>
    			<security:user name="kingsmile" password="kosta" authorities="ROLE_USER"/>
    			<security:user name="admin" password="kosta" authorities="ROLE_ADMIN,ROLE_USER"/>
    		</security:user-service> 
    	-->
    	</security:authentication-provider>
    </security:authentication-manager>
</beans>
