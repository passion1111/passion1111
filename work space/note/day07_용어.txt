클래스-
유사한 특징을 지닌 객체들의 속성을 묶어놓은집합체.




캡슐화 -
필요한 속성과 행위를 하나로 묶고 그중 일부를
외부에서 사용하지 못하도록 은닉한다.(클래스 내부에서만 가능)

상속 -자식클래스가 상속받고싶은 부모를 선택해서 상속받는다 이떄 상속받는 클래스를
자식클래스 하위클래스또는 서브클래스라고 부른다. 상속을 해주는 클래스를 부모클래스
상위클래스 또는 슈퍼클래스라고 부른다.

상속의 장점은 유지보수가 편해지며 중복된 코드수를 줄일수있다.
방법은 선언하는것인데 extends ~~~

다형성-
여러가지 형태를 가질수 있는 능력 한타입의 참조변수로 여러타입의 객체를 참조할수
있도록 함으로써 다형성을 프로그램적으로 구현하였다.

조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할수있도록 하였다는것이다. 

추상화
추상클래스는 미완성설계도와 같다. 완성되지못한채있는것 멤버의 개수와 관계된것이아니라
단지 미완성 메서드를 포함하고있다는 의미. 미완성된설계도로 제품을 만들수없듯이
추상클래스로 인스턴스는 생성할수없다. 추상클래스는 상속을 통해서 자손클래스에 의해서만 완성가능

추상메서드는 메서드는 선언부와 구현부로 구성돼있는데 선언부만 작성하고 구현부는 작성하지않은채로
남겨둔것이 추상메서드이다. 
그 이유는 메서드의 내용이 상속받는 클래스에따라 달라질수있기떄문에 조상클래스는 선언부만 작성하고 주석을 덧붙여
어떤 기능을 수행할 목적으로 작성됐는지 알려주고 실제내용은 상속받는 클래스에서
구현하도록 놔두는것.

접근제한자-
public,protected,default,private
한번에 네가지중 하나만 선택해서 사용가능하다.
멤버들은 객체 자신들만의 속성이자 특징이므로 외부에 공개되는것이 좋은것만은 아니다.
그런이유로 객체의 멤버들에게 제한을 걸수있다.이것을 접근제한자라고 부르고
퍼블릭 모든접근을 허용
프로텍티드같은 패키지(폴더)에있는 객체와 상속관계의 객체들만 허용
default 같은 패키지에있는 객체들만 허용
private 현재 객체내에서만 허용

- 클래스       : public, default

- 생성자       : public, protected, default, private

- 멤버변수    : public, protected, default, private

- 멤버메소드 : public, protected, default, private

- 지역변수    : 접근제한자 사용 불허

생성자 함수

  클래스에서 객체를 생성하는 방법을 제어하는 함수
생성자 함수를 사용하는 목적
1-객체 생성시에 데이터(인스턴스 변수값)전달
2-객체가 생성될떄 동작을 하고 싶을떄.
기본 생성자 jvm이 제공하며 new클래스명();으로 객체를 생성
하나이상의 생성자 함수를 만들면 객체를 생성할떄에는 반드시 지정된
방법중에 하나의 방식으로 new 연산자를 사용한다.
객체를 위해서 만들떄에는 첫문자를 대문자로 만든다.
생성자: 객체를 생성하는 옵션.
생성자 함수를 정의하게되면 new로 만드는것이 안된다
생성자 함수는 리턴타입이 없고 이름과 똑같이 하면 된다.

멤버 변수및 멤버함수
만들어진 클래스를 사용하려면 클래스명 <클래스변수명>=new 클래스명으로 인스턴스를
만든후에 가능하고 그 이후에는 클래스변수명.변수,클래스변수명.함수()의 형식으로 사용
여기서 변수는 멤버 변수라고하고 함수()는 멤버함수라고한다.
자바에서는 함수를 통칭해서 메소드라고한다. 그리고 프로그램 실행은
public static void main()이 있는 클래스에서 해야한다.

오버로드(중복함수)-
오버로딩이름 같은이름의메소드를 중복해서 정의하느넋이다.
자바에서는 한 클래스 내 같은 이름의 메소드를 둘 이상 가질 수 없다.
하지만 매개변수의 개수나 타입을 다르게하면 하나의 이름으로 메소드를 작성할수있다.

이 방식으로 메소드에 사용되는 이름을 절약할수있다.
또한 메소드를 호출할떄 전달해야할 매개변수의타입이나 개수에 크게 상관하지않고
호출할수있게된다.다형성을 구현하는 방법중하나.

오버라이딩-
부모클래스에서 정의한 메서드를 자식 클래스에서 변경하는것.
어쩔수없이 부모클래스의 값을 변경해야할떄 필요하고 기본적인 조건은
메서드의 이름이 같아야한다. 리턴타입이 같아야한다.
static메서드의 오버라이딩을 허용하지않는다.

인스턴스-클래스의 정의를 통해 만들어진 객체를 의미
객체지향 프로그래밍적 관점에서 객체는 클래스의타입으로 선언됐을떄를
의미하는것이고 그 객체가 메모리에 할당돼 실제 컴퓨터에실행될떄를 인스턴스라고한다.
인스턴스는 추상화 개념 또는 클래스객체 컴퓨터프로세스등과같은
템플릿이 실제 구현된것이다.

객체- 객체는 선언을 의미한다. 현실세계에서 실제 사물을 객체라고 불러서
컴퓨터상에서도 실제 구현된 프로그램등만 객체가 아니라 개념등과같은것도
객체라고 부를수있다.그런데 객체는 인스턴스화를 통해 만든 실체이다.

오브젝트(객체)는 실체 인스턴스는 보통 관계에 집중한용어.

인터페이스-
인터페이스는 호환성이라고 이해를 많이하는편이다.
어떤 객체가 특정한 인터페이스를 사용한다면 그 객체는 반드시
인터페이스의 메소드들로 구현돼야한다.
그렇지않으면 컴파일조차 불가능하다.
하나의 클래스가 여러개의 인터페이스를 구현할수있다.
인터페이스도 상속이된다. 인터페이스의 멤버는 반드시 public이다.
그리고 상속의 extends와 달리implements 키워드를 사용해야한다.
자바는 1번밖에 상속을 못하지만 인터페이스를 이용하면 다중상속과 비슷하게된다.

추상클래스
하나이상의 추상 메소드를 포함하는 클래스이다. 추상메소드는 선언만 있고 본체는 없는 함수이며
인터페이스는 클래스와 별도로 일련의 연관된 메서드를 정의
추상클래스는 메서드를 선언하지만 모든 메서드를 선언하지않는 불완전하게 정의된 메서드
차이점은 인터페이스는 클래스가 아니지만 추상클래스는 클래스다.
추상클래스는 일반적으로 베이스 클래스로 상속해서 더 구체적인클래스를 만들떄 좋다.
인터페이스는 서로 관련이 없는 클래스에서 공통저긍로 사용하는 방식이 필요하지만
기능을 각각 국현할 경우 좋다.

static:객체들끼리 공유되는 값은 무조건 static으로 선언해야한다.
static=공유의 개념
static 3가짖 종류 변수,메소드,블록 
변수는 객체들끼리 공유하는 값이다. static{}형태로 구현되고 메모리에 올라가는순선서는
클래스에서 static한 어떤작업이 필요시 클래스파일->static블록->메인 메소드 순서로 메모리에 올라간다.
그렇기떄문에 메인메소드가실행되기이전에 STATIC블럭의 결과가 먼저 출력된다.



this
자바에서 this는 객체 자기자신을 나타냅니다 주로 3가지 형태로 사용되고있으며
1.클래스의 속성과 생성자 메소드의 매개변수의이름이 같은경우 -클래스 속성을 사용할떄 this.키워드르 붙여줌
일반적으로 생성자 또는 set/get메소드의 매개변수이름은 클래스의 속성이름과 동일하게 정의돼 사용된다.

2.클래스에 오버로딩된 다른 생성자 호출
생성자 최상단에 사용돼야 합니다.
하나의 클래스에 여러개의 생성자가 오버로딩 됐을떄 일부분을 제외하고는 서로 중복된 코드를
가지고있는경우가 많습니다.
이런순간에 내부에 정의된 다른 생성자를 호출하여 코드의 중복을 피하고 깔끔한 소스를 작성할수있다.
같은 클래스에 오버로딩된 다른생성자를 호출떄에도 this키워드가 사용된다.

3. 객체 자신의 참조값을 전달하고 싶을떄.
어떤 메소드에서는 동작을 완료하고 리턴값으로 어떤 메소드에서는 내부에서 호출하고자하는 메소드의
매개변수로 객체 자기자신의 참조값을 전달하고싶은경우가있다.이럴떄에는 getFruitInstance()메소드의
구현부분처럼 this키워드를 이용함으로써 구현이 가능하다.