<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lib.employee.book.model.EmpBookDAO">
   
   <update id="returnBook" parameterType="lib.employee.book.model.RentalDTO">
      update rental set rent_enddate = sysdate, rent_status = '반납' where book_num = #{ book_num }
   </update>
   
   <update id="bookRentCnt" parameterType="lib.employee.book.model.EmpBookDTO">
      update book set book_rent_cnt = nvl(max(book_rent_cnt)+1,1) from book) where book_num = #{ book_num }
   </update>
   
   <insert id="rentBook" parameterType="lib.employee.book.model.RentalDTO">
      insert into rental values((select nvl(max(rent_num)+1,1) from rental), #{ book_num }, #{ mem_id }, sysdate,  sysdate+7, 'X', 'X', '대여중')
   </insert>
   
   <select id="rentMemCheck" resultType="lib.member.model.MemberDTO" parameterType="java.lang.String">
      select * from member where mem_id like #{ mem_id }
   </select>
      
   <select id="rentMemBookCheck" resultType="lib.employee.book.model.EmpBookDTO" parameterType="java.lang.String">
      select * from
         (select  b.*, nvl(r.rent_status,'대여가능') rent,rent_num
                 from  (select * from book order by book_num desc) b
                join  (select book_num, rent_status ,rent_num from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)  and rental.mem_id =#{mem_id} and rent_status = '대여중' or (rent_status='예약중' and rental.mem_id =#{mem_id}) ) r
                   on (b.book_num = r.book_num))       
   </select>   
   
   <select id="rentBookCheck" resultType="lib.employee.book.model.EmpBookDTO" parameterType="int">
        select * from
          ( select rownum rnum, b.*, (case when r.rent_status='반납' then '대여가능'
                                                     when r.rent_status is null then '대여가능'
                                                     when r.rent_status ='예약중' then '예약중' 
                            else '대여중' end) rent
                  from  (select * from book where book_num = #{ book_num }) b
                  left outer join (select book_num, rent_status from rental
                                  where rent_startdate in (select max(rent_startdate) from rental  group by book_num) 
                                  and rent_num in (select max(rent_num) from rental  group by book_num) ) r  
                  on (b.book_num = r.book_num))
   </select>   
   
   <select id="selectRowNum" resultType="int">
      select nvl(count(*),0) from book
   </select>   
   
   <select id="select" resultType="lib.employee.book.model.EmpBookDTO" parameterType="int">
   <![CDATA[
      select * from
         (select rownum rnum, b.*, nvl(rent_status,'대여가능') rent
                 from  (select * from book order by book_num desc) b
                 left outer join  (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
                   on (b.book_num = r.book_num))
          where rnum > #{ startRowNum } and rnum <= #{ endRowNum }
   ]]>
   </select>
   
   <select id="searchAll" parameterType="java.lang.String" resultType="lib.employee.book.model.EmpBookDTO">
      select b.*,  nvl(rent_status, '대여가능') rent
         from  (select * from book where book_num like #{ searchWord } or book_name like #{ searchWord } or book_author like #{ searchWord } or book_pub_house like #{ searchWord }
                        order by book_num desc) b 
         left outer join  (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
         on b.book_num = r.book_num
   </select>
   
   <select id="searchCtgr" parameterType="java.lang.String" resultType="lib.employee.book.model.EmpBookDTO">
      select b.*, nvl(rent_status, '대여가능') rent
          from (select * from book where ${searchCtgr} like #{searchWord} order by book_num desc) b
          left outer join (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
          on b.book_num = r.book_num
   </select>
   
   
   <insert id="insertBook" parameterType="lib.employee.book.model.EmpBookDTO">
      insert into book (book_num, book_author, book_name,  book_pub_house,
         book_pub_date, book_ISBN, book_apdx_status, book_ctgr_num, book_rsrv_status, book_rent_cnt, book_input_date, book_ctgr_num_db) 
        VALUES ((select nvl(max(book_num)+1,100001) from book), #{ book_author }, #{ book_name }, #{ book_pub_house }, 
         #{ book_pub_date }, #{ book_ISBN }, #{ book_apdx_status }, #{ book_ctgr_num }, #{ book_rsrv_status }, 0, sysdate, #{ book_ctgr_num_db })
   </insert>
   
   <delete id="deleteBook" parameterType="lib.employee.book.model.EmpBookDTO">
      delete from book where book_num = #{ book_num }
   </delete>
   
   <update id="updateBook" parameterType="lib.employee.book.model.EmpBookDTO">
      update book set book_author=#{ book_author }, book_name=#{ book_name }, 
         book_pub_house=#{ book_pub_house }, book_pub_date=#{ book_pub_date }, book_ISBN=#{ book_ISBN },
         book_apdx_status=#{ book_apdx_status }, book_ctgr_num=#{ book_ctgr_num }, book_rsrv_status=#{ book_rsrv_status },
         book_ctgr_num_db=#{ book_ctgr_num_db }
         where book_num = #{ book_num }
   </update>
   
   <select id="hopeSelectRowNum" resultType="int">
      select count(*) from hope_book
   </select>   
   
   <update id="hopeApprove" parameterType="lib.employee.book.model.Hope_BookDTO">
      update hope_book set hope_status='승인' where hope_book_num = #{ hope_book_num }
   </update>
   
   <update id="hopeReturn" parameterType="lib.employee.book.model.Hope_BookDTO">
      update hope_book set hope_status='반려' where hope_book_num = #{ hope_book_num }
   </update>

   <delete id="hopeDelete" parameterType="lib.employee.book.model.Hope_BookDTO">
      <![CDATA[
         delete from hope_book where hope_input_date < sysdate - 7
      ]]>
   </delete>
   
   <select id="hopeSelect" parameterType="int" resultType="lib.employee.book.model.Hope_BookDTO">
      <![CDATA[
         select * from 
             (select  rownum r, hope_book_num, book_author, book_name, book_pub_house, book_pub_date, book_isbn, book_price, hope_status, hope_input_date
                 from (select * from hope_book order by hope_book_num desc))
             where r > #{ startRowNum } and r <= #{ endRowNum }
      ]]>
   </select>
   
   <select id="newSelect" resultType="lib.employee.book.model.New_BookDTO">
      select * from new_book order by new_book_num_sub desc
   </select>

   <select id="newSelectBook" resultType="lib.employee.book.model.New_BookDTO">
      select * from new_book where new_status = '승인'
   </select>
   
   <insert id="newInsertBook" parameterType="lib.employee.book.model.New_BookDTO">
      insert into new_book VALUES (#{ new_book_num }, (select nvl(max(new_book_num_sub)+1,1) from new_book), 
         #{ book_author }, #{ book_name }, #{ book_pub_house }, #{ book_pub_date }, 
         #{ book_ISBN }, #{ book_price }, '신청 완료', sysdate)
   </insert>
   
   <select id="newMaxBookNum" resultType="int">
      (select nvl(max(new_book_num)+1,1) from new_book)
   </select>
   
   <delete id="newDeleteBook" parameterType="lib.employee.book.model.New_BookDTO">
      delete from new_book where new_book_num_sub = #{ new_book_num_sub }
   </delete>
   
   <update id="newUpdateBook" parameterType="lib.employee.book.model.New_BookDTO">
      update new_book set book_author=#{ book_author }, book_name=#{ book_name }, book_pub_house=#{ book_pub_house }, 
         book_pub_date=#{ book_pub_date }, book_ISBN=#{ book_ISBN }, book_price=#{ book_price }
         where new_book_num_sub = #{ new_book_num_sub }
   </update>
   
   <update id="addRentCnt" parameterType="int">
      update book set book_rent_cnt = book_rent_cnt+1 where book_num = #{ book_num }
   </update>
   
   <select id="disSearch" parameterType="int" resultType="lib.employee.book.model.BookRentDisDTO">
      select t.*,  dis_book_num, dis_input_date, dis_status 
          from (select b.*, nvl(r.rent_status, '대여가능') rent
                   from  (select * from book where book_num = #{ book_num }) b
                   left outer join  (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
                   on (b.book_num = r.book_num)) t
                   left outer join discard_book d on d.book_num = t.book_num
   </select>
   
   <select id="disSelect"  resultType="lib.employee.book.model.BookRentDisDTO">
      select t.*,  dis_book_num, dis_input_date, dis_status 
          from (select b.*, nvl(r.rent_status, '대여가능') rent
                   from book b
                   left outer join  (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
                   on (b.book_num = r.book_num)) t
                   join discard_book d on d.book_num = t.book_num
           order by dis_book_num desc
   </select>
   
   <select id="disSelectBook"  resultType="lib.employee.book.model.BookRentDisDTO">
      select t.*,  dis_book_num, dis_input_date, dis_status 
          from (select b.*, nvl(r.rent_status, '대여가능') rent
                   from book b
                   left outer join  (select book_num, rent_status from rental where rent_startdate in (select max(rent_startdate) from rental group by book_num)) r
                   on (b.book_num = r.book_num)) t
                   join discard_book d on d.book_num = t.book_num
           where dis_status = '승인'
           order by dis_book_num desc
   </select>
   
   <insert id="disInsertBook" parameterType="lib.employee.book.model.BookRentDisDTO">
      insert into discard_book values((select nvl(max(dis_book_num)+1,1) from discard_book), #{ book_num }, sysdate, '신청 완료')
   </insert>
   
   <delete id="disDeleteBook" parameterType="lib.employee.book.model.BookRentDisDTO">
      delete from discard_book where dis_book_num = #{ dis_book_num }
   </delete>
</mapper>